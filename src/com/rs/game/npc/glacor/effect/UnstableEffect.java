package com.rs.game.npc.glacor.effect;import com.rs.game.Entity;import com.rs.game.Hit;import com.rs.game.Hit.HitLook;import com.rs.game.npc.NPC;import com.rs.game.npc.glacor.Effect;import com.rs.game.tasks.WorldTask;import com.rs.game.tasks.WorldTasksManager;public class UnstableEffect implements Effect {	private boolean exploded = false;	private boolean exploding = false;	private int tick = 0;	public int getTick() {		return tick;	}	@Override	public void processEffect(final NPC npc, final Entity target) {		final int blastRadius = npc.getId() == 14301 ? 5 : 3;		if (target == null || npc == null)			return;		if (npc.withinDistance(target, blastRadius) && !exploding				&& npc.getHitpoints() >= 551) {			exploding = true;			exploded = false;		}		if (exploded && npc.getHitpoints() < 551)			npc.setHitpoints(npc.getHitpoints() + 10);		if (exploding && !exploded) {			exploding = false;			exploded = true;			WorldTasksManager.schedule(new WorldTask() {				@Override				public void run() {					for (Entity entity : npc.getPossibleTargets()) {						if (entity.withinDistance(npc, blastRadius)) {							entity.applyHit(new Hit(npc, (int) (target									.getHitpoints() * 0.33),									HitLook.REGULAR_DAMAGE));						}						npc.applyHit(new Hit(npc,								(int) (npc.getHitpoints() * 0.90),								HitLook.REGULAR_DAMAGE));						stop();					}				}			}, 38, 0);		}	}	public void setTick(int tick) {		this.tick = tick;	}}